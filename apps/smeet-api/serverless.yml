service: smeet-api

plugins:
  - 'serverless-bundle'
  - serverless-appsync-plugin

package:
  individually: true

custom:
  stage: ${opt:stage, env:STAGE, 'dev'}
  bundle:
    linting: false
    tsConfig: 'tsconfig.app.json'
  appSync:
    name: ${self:provider.stage}-smeet-api
    authenticationType: API_KEY
    apiKeys:
      - name: default # name of the api key
        description: 'Default api key'
    schema:
      - ../../libs/shared/graphql/schema/_query.graphql
      - ../../libs/shared/graphql/schema/_subscription.graphql
      - ../../libs/shared/graphql/schema/_mutation.graphql
      - ../../libs/shared/graphql/schema/types.graphql
    dataSources:
      - type: AWS_LAMBDA
        name: createUser
        config:
          functionName: createUser
      - type: AWS_LAMBDA
        name: listChats
        config:
          functionName: listChats
    mappingTemplates:
      - dataSource: createUser
        type: Mutation
        field: createUser
        request: false
        response: false
      - dataSource: listChats
        type: Query
        field: listChats
        request: false
        response: false

provider:
  name: aws
  region: eu-central-1
  runtime: nodejs18.x
  stage: ${self:custom.stage}
  timeout: 20
  deploymentBucket:
    name: ${ssm:/serverless/smeet-${self:provider.stage}/deployment-bucket}
  apiGateway:
    restApiId: ${ssm:/serverless/smeet-${self:provider.stage}/rest-api-id}
    restApiRootResourceId: ${ssm:/serverless/smeet-${self:provider.stage}/rest-api-root-resource-id}
  environment:
    STAGE: ${self:custom.stage}
    NODE_OPTIONS: --enable-source-maps
    APP_SYNC_URL:
      Fn::GetAtt: [GraphQlApi, GraphQLUrl]
    APP_SYNC_API_KEY:
      Fn::GetAtt: [GraphQlApiKeydefault, ApiKey]
    # Dynamo
    DYNAMO_USER_TABLE: ${ssm:/serverless/smeet-${self:provider.stage}/dynamodb-users-datastore}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:DescribeTable
            - dynamodb:UpdateItem
            - dynamodb:BatchGetItem
            - dynamodb:GetItem
            - dynamodb:DeleteItem
            - dynamodb:PutItem
            - dynamodb:Scan
            - dynamodb:Query
          Resource:
            - ${ssm:/serverless/smeet-${self:provider.stage}/dynamodb-users-datastore-arn}
        - Effect: Allow
          Action:
            - events:PutEvents
          Resource:
            - arn:aws:events:${self:provider.region}:${aws:accountId}:event-bus/${self:provider.stage}

functions:
  getConfig:
    handler: src/handlers/config/getConfig.handler
    events:
      - http:
          method: GET
          path: /api/getConfig

  createUser:
    handler: src/resolvers/users/createUser.handler
  listChats:
    handler: src/resolvers/chats/listChats.handler

  newUser:
    handler: src/eventHandlers/users/newUser.handler
    events:
      - eventBridge:
          eventBus: ${self:provider.stage}
          pattern:
            source:
              - users
            detail-type:
              - 'NewUser'
